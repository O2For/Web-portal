{"name": "test_St110[99h@snapmail.cc-99h-99hrep1@snapmail.cc-99hrep1-99hrep2@snapmail.cc-99hrep2-National ID Card-Passport-99hrep3@snapmail.cc-99hrep3-Passport-Ht@12345-ChloeCompany-Link_NewCorp_WithRep_2-chloe@snapmail.cc-Ht@12345]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=112.0.5615.50)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x006ADCE3]\n\t(No symbol) [0x006439D1]\n\t(No symbol) [0x00554DA8]\n\t(No symbol) [0x00580292]\n\t(No symbol) [0x005803AB]\n\t(No symbol) [0x005AEE9C]\n\t(No symbol) [0x0059AF14]\n\t(No symbol) [0x005AD57C]\n\t(No symbol) [0x0059ACC6]\n\t(No symbol) [0x00576F68]\n\t(No symbol) [0x005780CD]\n\tGetHandleVerifier [0x00923832+2506274]\n\tGetHandleVerifier [0x00959794+2727300]\n\tGetHandleVerifier [0x0095E36C+2746716]\n\tGetHandleVerifier [0x00756690+617600]\n\t(No symbol) [0x0064C712]\n\t(No symbol) [0x00651FF8]\n\t(No symbol) [0x006520DB]\n\t(No symbol) [0x0065C63B]\n\tBaseThreadInitThunk [0x76286359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87D4+228]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87A4+180]", "trace": "self = <venv.test_demo.SmokeTesting_test.TestCaes object at 0x000002043BED1888>\ndrivers = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6667a7062c53b252cae87a8e58d07a90\")>\nCorpEmail = '99h@snapmail.cc', CorpName = '99h'\nRep1Email = '99hrep1@snapmail.cc', Rep1Name = '99hrep1'\nRep2Email = '99hrep2@snapmail.cc', Rep2Name = '99hrep2'\nDocumentType1 = 'National ID Card', Rep2Doc2 = 'Passport'\nRep3Email = '99hrep3@snapmail.cc', Rep3Name = '99hrep3'\nDocumentType2 = 'Passport', Password = 'Ht@12345'\nbusiness_name = 'ChloeCompany', NewProductName = 'Link_NewCorp_WithRep_2'\nbusiness_email = 'chloe@snapmail.cc', business_password = 'Ht@12345'\n\n    @allure.story('Verify that the corporate user should be able to upload a document..')\n    #@pytest.mark.skip('skop')\n    @pytest.mark.parametrize(\n        \"CorpEmail,CorpName,\"\n        \"Rep1Email,Rep1Name,\"\n        \"Rep2Email,Rep2Name,DocumentType1,Rep2Doc2,\"\n        \"Rep3Email,Rep3Name,DocumentType2,Password,\"\n        \"business_name,NewProductName,business_email,business_password\",\n        [(Test_data['T110_CorpEmail'],Test_data['T110_CorpName'],\n    \n          Test_data['T110_Rep1Email'],Test_data['T110_Rep1Name'],\n    \n          Test_data['T110_Rep2Email'], Test_data['T110_Rep2Name'], Test_data['T110_DocumentType1'], Test_data['T110_Rep2Doc2'],\n    \n          Test_data['T110_Rep3Email'], Test_data['T110_Rep3Name'], Test_data['T110_DocumentType2'],\n    \n          Test_data['T110_Password'],\n    \n          Test_data['business_name'], Test_data['T110_NewProductName'], Test_data['business_email'], Test_data['business_password'],\n          )])\n    def test_St110(self, drivers, CorpEmail, CorpName,\n                   Rep1Email, Rep1Name,\n                   Rep2Email, Rep2Name,DocumentType1, Rep2Doc2,\n                   Rep3Email, Rep3Name, DocumentType2,\n                   Password,\n                   business_name, NewProductName,business_email, business_password):\n        RootPath = PathOperation()\n        with allure.step('Precondition 0: Doc Type Path Ready....'):\n            DocPath = RootPath.getOtherPath('\\Data')\n            dataTest = dict(data.Photo_C)  # 加载 文档内容\n    \n        CusHomePage=CustomerHomePage(drivers)\n        cus = customer_login_page(drivers)\n        cus.open(Test_data['customer_url']);\n        # with allure.step('Precondition 1: Sign up a individual user:{}'.format(Rep1Email)):\n        #     cus.sign_up.click()\n        #     cus.register_email_field.send_keys(Rep1Email)\n        #     cus.register_password_field.send_keys(Password)\n        #     cus.register_passwordRepeat_field.send_keys(Password)\n        #     cus.accept_read.click()\n        #     cus.SignUpInd(Rep1Name)\n        #     sleep(3)\n        #     CusHomePage.closeProfile_SetUp()\n        #     # cus.Login_step(InviteEmail,Password)  #Test\n        #     cus.wait_page_load_timeout(10)\n        #     CusHomePage.Logout()\n        #with allure.step('Precondition 2: Sign up a Corporate user:{}'.format(CorpEmail)):\n            # cus.sign_up.click()\n            # cus.register_email_field.send_keys(CorpEmail)\n            # cus.register_password_field.send_keys(Password)\n            # cus.register_passwordRepeat_field.send_keys(Password)\n            # cus.accept_read.click()\n            # cus.SignUpCorp(CorpName)\n            # CusHomePage.closeProfile_SetUp()\n            #cus.Login_step(CorpEmail,Password)  # Test\n    \n        ActionOP = ActionPage(drivers)\n        corpRep = CorpRep(drivers)\n        AuthPage = AuthRep(drivers)\n        # with allure.step('A. Verify the workflow of corporate send invite 1 existing user:{}and 2 new users:{},{} as the auth reps at the time.'.format(Rep1Email,Rep2Email,Rep3Email)):\n        #     with allure.step('1. Click Add Authorised Representatives to add online 3 reps'):\n        #         ActionOP.AddOnlineRep(Rep1Email,Rep2Email,Rep3Email)\n        #         CusHomePage.Logout()\n        # with allure.step('B. Verify the workflow of individual user become an anthorized representative.'):\n        #     with allure.step('Scenario 1: The individual user {} has not uploaded any documents.'.format(Rep1Email)):\n        #         cus.Login_step(Rep1Email,Password)\n        #\n        #         with allure.step('Confirm anthorized representative action'):\n        #             ActionOP.ConfirmAuteRep_With_No_Doc()\n        #\n        #         with allure.step('Corporates I represent has this corporate name:{}'.format(CorpName)):\n        #             obtained_Information=corpRep.CheckCorpInformation()\n        #             assert obtained_Information['getcorpName']==CorpName\n        #             assert len(obtained_Information['getDocWithAccess'])==0 #判断是否为空字符串\n        #         with allure.step('Logout this user'):\n        #             CusHomePage.Logout()\n        #\n        #     with allure.step('Scenario 2: The individual user {} has uploaded some documents that with only one version.'.format(Rep2Email)):\n        #         with allure.step('The individual user sign up successfuly'):\n        #             cus.FirstSignInd(Rep2Email,Password,Rep2Name)\n        #             CusHomePage.closeProfile_SetUp()\n        #             #cus.Login_step(Rep2Email,Password) #  test\n        #\n        #         with allure.step('Upload one document'):\n        #             CusHomePage.UploadDocHome_Ind(DocPath, dataTest, DocumentType1,Rep2Name)\n        #\n        #         with allure.step('Confirm anthorized representative action, and shared doc {} to corporate'.format(DocumentType1)):\n        #             ActionOP.ConfirmAuteRep_WithDocs(DocumentType1)\n        #\n        #         with allure.step('Corporates I represent has this corporate name:{} with shared doc {}'.format(CorpName,DocumentType1)):\n        #             obtained_Information=corpRep.CheckCorpInformation()\n        #             assert obtained_Information['getcorpName']==CorpName\n        #             assert DocumentType1 in obtained_Information['getDocWithAccess']\n        #\n        #         with allure.step('Logout this user'):\n        #             CusHomePage.Logout()\n        #\n        #     with allure.step('Scenario 3 :The user {} has uploaded some documents that with multiple versions.'.format(Rep3Email)):\n        #         with allure.step('The individual user sign up successfuly'):\n        #             cus.FirstSignInd(Rep3Email, Password, Rep3Name)\n        #             CusHomePage.closeProfile_SetUp()\n        #             #cus.Login_step(Rep3Email,Password) #Test\n        #\n        #         with allure.step('Upload multiple docs versions. Version ==2'):\n        #             CusHomePage.UploadDocHome_Ind(DocPath, dataTest, DocumentType2,Rep3Name)\n        #             CusHomePage.UploadDocHome_Ind(DocPath, dataTest, DocumentType2,Rep3Name)\n        #             assert CusHomePage.GetDoclatestVersion(DocumentType2)=='Version 2'\n        #\n        #         with allure.step('Confirm anthorized representative action, and shared doc {} to corporate'.format(DocumentType2)):\n        #             ActionOP.ConfirmAuteRep_WithDocs(DocumentType2)\n        #\n        #         with allure.step('Corporates I represent has this corporate name:{} with shared doc {}'.format(CorpName,DocumentType2)):\n        #             obtained_Information=corpRep.CheckCorpInformation()\n        #             assert obtained_Information['getcorpName']==CorpName\n        #             assert DocumentType2 in obtained_Information['getDocWithAccess']\n        #\n        #         with allure.step('Logout this user'):\n        #             CusHomePage.Logout()\n        # #\n        # #\n        #\n        #     document = Documents_Corp(drivers)\n        #     with allure.step('Assert The rep display results'):\n        #         with allure.step('Login corporate'):\n        #             cus.Login_step(CorpEmail,Password)\n        #\n        #         with allure.step('Check Connections/Authorised Representatives page'):\n        #             with allure.step('CHeck rep name and shared doc Coincident'):\n        #                 getAuthInfor = AuthPage.CheckAuthInformation()\n        #                 assert len(getAuthInfor[Rep1Email])==0\n        #                 assert DocumentType1 in getAuthInfor[Rep2Email]\n        #                 assert DocumentType2 in getAuthInfor[Rep3Email]\n        #\n        #             document.open_Documents()\n        #             document.open_Representatives()\n        #             with allure.step('{} has no doc '.format(Rep1Name)):\n        #                 document.open_OnlineRepPage(Rep1Name)\n        #                 assert document.NOdoc_isExist()==True\n        #             with allure.step('{} has one doc {} latest doc is 1'.format(Rep2Name,DocumentType1)):\n        #\n        #                 document.open_OnlineRepPage(Rep2Name)\n        #                 assert document.check_repDocDetails(DocumentType1)=='Version 1'\n        #                 document.close_doc_window()\n        #\n        #             with allure.step('{} has one doc {} latest doc version is 2'.format(Rep3Name,DocumentType2)):\n        #\n        #                 document.open_OnlineRepPage(Rep3Name)\n        #                 assert document.check_repDocDetails(DocumentType2) == 'Version 2';\n        #                 #document.close_doc_window()\n        #             with allure.step('For {} Previous versions of this document will show NO ACCESS in details and cannot request to view'.format(Rep3Name)):\n        #\n        #                 document.latestV.click()\n        #                 document.PreviousV.click();sleep(3)\n        #                 assert document.docIs_NoAccess()==True\n        #                 document.close_doc_window()\n        #                 CusHomePage.Logout()\n        # with allure.step('C: Verify the workflow of the existing rep {} upload new version of the document that has granted access for the corporate company.'.format(Rep2Email)):\n            # with allure.step('Login rep account and Upload new version of document{}'.format(DocumentType1)):\n            #     cus.Login_step(Rep2Email,Password)\n            #     CusHomePage.UploadDocHome_Ind(DocPath,dataTest,DocumentType1)\n            #     with allure.step('Rep Logout'):\n            #         CusHomePage.Logout()\n    \n            # document = Documents_Corp(drivers)\n            # with allure.step('Login the corporate account.'):\n            #\n            #     cus.Login_step(CorpEmail, Password)\n            # with allure.step('Switch to This rep Documents tab page.'):\n            #\n            #     document.open_Documents()\n            #     document.open_Representatives()\n            #     document.open_OnlineRepPage(Rep2Name)\n            # with allure.step(' There is \"NEW\" at the top-left corner of the document {} '.format(DocumentType1)):\n            #     assert document.check_NewLabel(DocumentType1)\n            #with allure.step('Check Document and has a \"Request Access\" button at the document.'):\n                #latestVersion = document.check_repDocDetails(DocumentType1)\n                #document.requestAccessButton.click()\n            # with allure.step('Input Note and confirm'):\n            #     document.note.send_keys('The {} Access Request'.format(latestVersion))\n            #     document.confirmNote.click();time.sleep(3)\n            # with allure.step('The new version will be displayed.'):\n            #     assert document.docIs_NoAccess()==False\n            #     document.close_doc_window()\n            #     CusHomePage.Logout()\n            # massageP=MessagesPage(drivers)\n            # with allure.step('Login rep account ,in notification named \"Important Info\" will be displayed.'):\n            #     cus.Login_step(Rep2Email,Password)\n            #     massageP.JumpSytemMessage()\n            #     assert 'The {} Access Request'.format(latestVersion) in massageP.GetLatestMassage()\n            #     CusHomePage.Logout()\n        document = Documents_Corp(drivers)\n    \n        # with allure.step('D: Verify the workflow of the corporate request access to rep {} one document that he without the access before'.format(Rep2Email)):\n            # with allure.step('Rep upload a new type doc name {}'.format(Rep2Doc2)):\n            #     cus.Login_step(Rep2Email,Password)\n            #     CusHomePage.UploadDocHome_Ind(DocPath,dataTest,Rep2Doc2,Rep2Name)\n            #     CusHomePage.Logout()\n    \n    \n            # with allure.step('Switch to This rep Documents tab page.'):\n            #\n            #     cus.Login_step(CorpEmail,Password)\n            #     document.open_Documents()\n            #     document.open_Representatives()\n            #     document.open_OnlineRepPage(Rep2Name)\n            # with allure.step('There is \"No Access\" at the top-left corner of the document {} '.format(Rep2Doc2)):\n            #\n            #     assert document.check_NoAccess_Label(Rep2Doc2)\n            # with allure.step('Send Document Permission Request '):\n            #\n            #     document.note.send_keys('The {} Access Request'.format(Rep2Doc2))\n            #     document.confirmNote.click();time.sleep(3)\n            #     CusHomePage.Logout()\n    \n            # with allure.step('Rep login and Document Permission Request display in the action list'):\n                # cus.Login_step(Rep2Email,Password)\n                #后面会修复 为\n                # ActionOP.open_Purpose('requested access to the below document(s)')\n                # ActionOP.Confirm_DocPermission(Rep2Doc2,'The {} Access Request'.format(Rep2Doc2))\n                # with allure.step('Check Corporates I represent displays doc {}'.format(Rep2Doc2)):\n                #\n                #     AccessDoc = corpRep.CheckCorpInformation()\n                #     assert Rep2Doc2 in AccessDoc['getDocWithAccess']\n                #     CusHomePage.Logout()\n            # with allure.step('Coporate login can see the details of the doc {}'.format(Rep2Doc2)):\n                # cus.Login_step(CorpEmail,Password)\n            #     document.open_Documents()\n            #     document.open_Representatives()\n            #     document.open_OnlineRepPage(Rep2Name)\n            #     assert document.check_repDocDetails(Rep2Doc2)\n            #     document.close_doc_window()\n            #     CusHomePage.Logout()\n    \n        product_op = Product(drivers)\n        bus = LoginPage(drivers)\n        nav = NavigationBar(drivers)\n    \n    \n        # with allure.step('Precondition 1: {} create a new product name {}...'.format(business_name, NewProductName)):\n            # with allure.step('Login business portal...'):\n            #     OpenNew_window = 'window.open(\"{}\")'.format(Test_data['business_url'])\n            #     bus.execute_script(OpenNew_window);\n            #     bus.switch_to_window(1)\n            #     bus.wait(10);\n            #     sleep(7)\n            # #\n            # #\n            #     bus.BusLogin(business_email, business_password)\n            # with allure.step('Create a new Product/Services named {}'.format(NewProductName)):\n            #     product_op.OpenProuductPage()\n            #     product_op.Create_Basic_Inforamtion(NewProductName, 'Corporate',\n            #                                         Note='Scenario 1: The corporate company has shared the document to OBC')\n            #     product_op.Create_Standard_Due_Diligence_Documents()\n            #     product_op.Create_Authorised_Representatives(1, DocumentType1)\n            # with allure.step('Send to {} Source documents'.format(CorpEmail)):\n            #     nav.SourceDocuments(CorpEmail, NewProductName,\n            #                         Note='Scenario 1: The corporate company has shared the document to OBC')\n            #     nav.switch_to_window(0)\n            # with allure.step('Corp completed this new product'):\n            #     cus.Login_step(CorpEmail,Password)\n            #     ActionOP.open_Purpose(NewProductName)\n            #\n            #     ActionOP.Next.click();\n            #     ActionOP.Select_rep(Rep2Name,)\n            #     ActionOP.consent_action()\n            #     CusHomePage.Logout()\n    \n        # with allure.step('E: Verify the workflow of the existing rep revoke the document that has granted access for the corporate company.'):\n            # with allure.step('Scenario 1: The corporate company has shared the document to OBC: {}'.format(business_name)):\n            #\n                # with allure.step('Rep login and revoke this doc {}'.format(DocumentType1)):\n                #     cus.Login_step(Rep2Email, Password)\n                    # corpRep.open_CorporatesRepresent()\n                    # with allure.step('The document has been shared with onboarding company, please revoke access first.'):\n                    #\n                    #     assert corpRep.PermissReovkeDoc(CorpName,DocumentType1) ==False\n    \n            # with allure.step('Scenario 2: The corporate company has not shared the document to any OBC: {}'.format(business_name)):\n    \n                # with allure.step('Rep login and revoke this doc {}'.format(Rep2Doc2)):\n    \n                    # with allure.step( 'Revoke button will be disappeared next the document.'):\n                    #     assert corpRep.PermissReovkeDoc(CorpName,Rep2Doc2) == True\n                    #     CusHomePage.Logout()\n                    # with allure.step(' Login the corporate account ->Switch to Documents tab page.'):\n                    #     cus.Login_step(CorpEmail, Password)\n                    # with allure.step('There is \"No Access\" at the document {} '.format(Rep2Doc2)):\n                    #\n                    #     document.open_Documents()\n                    #     document.open_Representatives()\n                    #     with allure.step('{} has no doc '.format(Rep2Doc2)):\n                    #         document.open_OnlineRepPage(Rep2Name)\n                    #         assert document.check_NoAccess_Label(Rep2Doc2,click=False)==True\n                    #         CusHomePage.Logout()\n    \n        # with allure.step('F: Verify the workflow of the existing rep delete the document that has granted access for the corporate company'):\n            # with allure.step('Scenario 1: The corporate company has shared the document{} to OBC.'.format(DocumentType1)):\n            #     with allure.step('1. Login the rep account'):\n            #         cus.Login_step(Rep2Email,Password)\n            #     with allure.step('2. Switch to Documents tab page.'):\n            #         document.open_Documents()\n            #     with allure.step('3. Delete the document that has been shared to OBC.'):\n            #         daleteResult = document.Delete_Doc(DocumentType1)\n            #     with allure.step('One info pop up will be displayed: The document has been shared with onboarding company, please revoke access first.'):\n            #         assert daleteResult[0]==False\n            #         assert 'The document has been shared' in daleteResult[1]\n    \n            # with allure.step('Scenario 2: The corporate company has no shared the document{} to OBC.'.format(Rep2Doc2)):\n            #\n            #     with allure.step('1 Delete the document {} that not shared to OBC.'.format(Rep2Doc2)):\n            #\n            #         daleteResult = document.Delete_Doc(Rep2Doc2)\n            #     with allure.step(' The document will be disappeared in My Document page.'):\n            #         assert daleteResult==True\n                     #CusHomePage.Logout()\n    \n        # with allure.step('G:  Verify the workflow of the corporate company remove the existing rep and invite he as the rep again.'):\n            # with allure.step('Scenario 1: The corporate company has shared the rep document to OBC.'):\n                # with allure.step('1. Login the corp account'):\n                    # cus.Login_step(CorpEmail, Password)\n                # with allure.step('2. Navigate to connections/Authorised Representative'):\n                #     AuthPage.open_AuthorisedRepresent()\n                # with allure.step('3. Choose a Rep and click the delete button Click the CONFIRM button  Refresh the list'):\n                #     assert AuthPage.Remove_onlineRep(Rep2Email)==True\n                # with allure.step('4. Check the in Document-Inactive'):\n                #\n                #     document.open_Documents()\n                #     document.open_Representatives()\n                #     document.open_InactiveRepPage(Rep2Name)\n                #     CusHomePage.Logout()\n                # with allure.step('5.Rep login and Switch to connections-Corporates Represent'):\n                #\n                #     cus.Login_step(Rep2Email,Password)\n                #     corpRep.open_CorporatesRepresent()\n                # with allure.step('6 The documents which has be shared to OBC are displayed in the documents permission page.'):\n                #\n                #     corpRep.PermissionSetting.click()\n                # with allure.step('7 Pop up warning:You are no longger the representative of the Corporates I represent and cannot modify the document permission'):\n                #\n                #     assert 'You are no longger the representative of' in corpRep.warning.text\n                #     corpRep.okay.click()\n                #\n                # with allure.step('8.Login the corp account and Invite the individual as the rep again.'):\n                #\n                #     AuthPage.open_AuthorisedRepresent()\n                #     AuthPage.InviteRep(Rep2Email)\n                #     CusHomePage.Logout()\n                # with allure.step('9.Rep Login and accept this invite'):\n                #\n                #     cus.Login_step(Rep2Email, Password)\n                #     ActionOP.open_Purpose('Confirmation needed as an Authorised representative')\n                #     ActionOP.confirmBeRepFirstConsent.click()\n                # with allure.step('10.Check if there is version information for previously shared files:This version of document {} has already been shared with this company'.format(Rep2Doc2)):\n                #\n                #     result = ActionOP.assertDocHasBeenShared(DocumentType1)\n                #     assert 'This version of document {} has already been shared with this company'.format(DocumentType1) in result[1]\n                #     ActionOP.docPermissionConfirm.click() ;ActionOP.sleep(3)\n                #     CusHomePage.Logout()\n                # with allure.step('11.Login corp ,Switch to the Document page.Expand the corresponding rep to check the documents.'):\n                #     cus.Login_step(CorpEmail,Password)\n                #     document.open_Documents()\n                #     document.open_Representatives()\n                #     document.open_OnlineRepPage(Rep2Name)\n                # with allure.step('12. The documents which selected and the documents that has shared with OBC are all with the access.'):\n                #     document.check_repDocDetails(DocumentType1)\n                #     document.close_doc_window()\n                #     CusHomePage.Logout()\n    \n            # with allure.step('Scenario 2: The corporate company has not shared the document to any OBC.'):\n                # cus.Login_step(CorpEmail, Password)\n                # with allure.step('2. Navigate to connections/Authorised Representative'):\n                #     AuthPage.open_AuthorisedRepresent()\n                # with allure.step('3. Choose a Rep and click the delete button Click the CONFIRM button  Refresh the list'):\n                #\n                #     assert AuthPage.Remove_onlineRep(Rep1Email) == True\n                #     CusHomePage.Logout()\n                # with allure.step('4 Login the rep account,Switch to connections-Corporates Represent,Find the corp you just matched'):\n                #\n                #     cus.Login_step(Rep1Email, Password)\n                #     result_ = corpRep.CheckCorpInformation()\n                #     assert result_== ''\n                #     CusHomePage.Logout()\n                # with allure.step('5.Login the corp account and Invite the individual as the rep again.'):\n                #\n                #     cus.Login_step(CorpEmail, Password)\n                #     AuthPage.open_AuthorisedRepresent()\n                #     AuthPage.InviteRep(Rep1Email)\n                #     CusHomePage.Logout()\n                # with allure.step('6.Rep Login and accept this invite'):\n                #\n                #     cus.Login_step(Rep1Email, Password)\n                #     ActionOP.ConfirmAuteRep_With_No_Doc()\n                #     CusHomePage.Logout()\n                # with allure.step('7.Login corp ,Switch to the Document page.Expand the corresponding rep to check the documents.'):\n                #\n                #     cus.Login_step(CorpEmail, Password)\n                #     document.open_Documents()\n                #     document.open_Representatives()\n                #     assert document.open_OnlineRepPage(Rep1Name)==True\n                #     CusHomePage.Logout()\n        companyshare = Companies(drivers)\n    \n        with allure.step('H. Verify the workflow of the corporate company share documents for one OBC via one existing Product/Service that need some rep documents.'):\n    \n            # with allure.step('Scenario 1: The selected rep has not granted the document access for the corporate.'):\n            #     with allure.step('1.Corp click the share buttonEnter the OBC company name to search,Select the product that requires REP documentation'):\n            #         cus.Login_step(CorpEmail,Password)\n            #         companyshare.JumpCompanies()\n            #         needrepnum = companyshare.SearchConnect(business_name,NewProductName)\n            #         assert needrepnum>0\n            #         RepPendingDoc = companyshare.ProductSelectRep(Rep1Name)\n            #         companyshare.XButton.click()\n            #         CusHomePage.Logout()\n            #     with allure.step('Rep Upload the doc required for the product'):\n            #         cus.Login_step(Rep1Email,Password)\n            #         for doc in RepPendingDoc:\n            #             CusHomePage.UploadDocHome_Ind(DocPath,dataTest,doc)\n            #         CusHomePage.Logout()\n            #     with allure.step('3..Corp share this OBC company again'):\n            #         cus.Login_step(CorpEmail, Password)\n            #         companyshare.JumpCompanies()\n            #         needrepnum = companyshare.SearchConnect(business_name, NewProductName)\n            #         assert needrepnum > 0\n            #         RepNoaccessDoc = companyshare.ProductSelectRep(Rep1Name)\n            #     with allure.step('4. Corp select the rep and NoAccess documents,The status of the document is NoAccess'):\n            #         assert DocumentType1 in RepNoaccessDoc\n            #     with allure.step('5.Click confirm button ,pop up You dont have permission for this document, please request permission first.'):\n            #         Message = companyshare.confirmShare()\n            #         assert  'please request permission first'in Message\n            #         companyshare.XButton.click()\n            #         CusHomePage.Logout()\n    \n            vaulhub = VaultHub(drivers)\n            drawer = Drawer(drivers)\n            with allure.step('Scenario 2: The selected rep has granted the document access for the corporate;'):\n                # with allure.step( '1.Corp click the share buttonEnter the OBC company name to search,Select the product that requires REP documentation'):\n                #     cus.Login_step(CorpEmail, Password)\n                #     companyshare.JumpCompanies()\n                #     needrepnum = companyshare.SearchConnect(business_name, NewProductName)\n                #     assert needrepnum > 0\n                #     DocNOcompleteStatue = companyshare.ProductSelectRep(Rep2Name)\n                # with allure.step('2.Corp select the rep and documents with permissions'):\n                #     assert DocNOcompleteStatue==0\n                # with allure.step('3. Click the CONFIRM button,and Reminder: Success'):\n                #     Message = companyshare.confirmShare()\n                #     assert 'Share Success!' in Message\n                #     CusHomePage.Logout()\n                with allure.step('The obc user can see the reps document'):\n                    with allure.step('Login business portal...'):\n                        OpenNew_window = 'window.open(\"{}\")'.format(Test_data['business_url'])\n                        bus.execute_script(OpenNew_window);\n                        bus.switch_to_window(1)\n                        bus.wait(10);\n                        sleep(7)\n                        bus.BusLogin(business_email, business_password)\n                    with allure.step('Check the Notifications can find {} link case'.format(CorpEmail)):\n                        vaulhub.openVaultHub();\n                        vaulhub.searchCustomer(Email=CorpEmail)\n                        vaulhub.ClickSearchList(CorpEmail)\n                        drawer.checkConnectionCases()\n                        drawer.ClickCase(NewProductName)\n                        drawer.showConnection()\n                    with allure.step('OBC  can check shared doc img'):\n>                       drawer.LinkedConnections(DocumentType1)\n\nSmokeTesting_test.py:1230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\PageView\\Business_portal\\VaultHubPage.py:92: in LinkedConnections\n    if Element(id_=imgDOCid).is_exist():\n..\\lib\\site-packages\\poium\\selenium.py:489: in is_exist\n    elem = Browser.driver.find_elements(by=self.k, value=self.v)\n..\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:860: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n..\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002043BD3A7C8>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DB87D4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DB87A4+180]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=112.0.5615.50)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x006ADCE3]\nE       \t(No symbol) [0x006439D1]\nE       \t(No symbol) [0x00554DA8]\nE       \t(No symbol) [0x00580292]\nE       \t(No symbol) [0x005803AB]\nE       \t(No symbol) [0x005AEE9C]\nE       \t(No symbol) [0x0059AF14]\nE       \t(No symbol) [0x005AD57C]\nE       \t(No symbol) [0x0059ACC6]\nE       \t(No symbol) [0x00576F68]\nE       \t(No symbol) [0x005780CD]\nE       \tGetHandleVerifier [0x00923832+2506274]\nE       \tGetHandleVerifier [0x00959794+2727300]\nE       \tGetHandleVerifier [0x0095E36C+2746716]\nE       \tGetHandleVerifier [0x00756690+617600]\nE       \t(No symbol) [0x0064C712]\nE       \t(No symbol) [0x00651FF8]\nE       \t(No symbol) [0x006520DB]\nE       \t(No symbol) [0x0065C63B]\nE       \tBaseThreadInitThunk [0x76286359+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DB87D4+228]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DB87A4+180]\n\n..\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidArgumentException"}, "steps": [{"name": "Precondition 0: Doc Type Path Ready....", "status": "passed", "start": 1683274847667, "stop": 1683274847667}, {"name": "H. Verify the workflow of the corporate company share documents for one OBC via one existing Product/Service that need some rep documents.", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=112.0.5615.50)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x006ADCE3]\n\t(No symbol) [0x006439D1]\n\t(No symbol) [0x00554DA8]\n\t(No symbol) [0x00580292]\n\t(No symbol) [0x005803AB]\n\t(No symbol) [0x005AEE9C]\n\t(No symbol) [0x0059AF14]\n\t(No symbol) [0x005AD57C]\n\t(No symbol) [0x0059ACC6]\n\t(No symbol) [0x00576F68]\n\t(No symbol) [0x005780CD]\n\tGetHandleVerifier [0x00923832+2506274]\n\tGetHandleVerifier [0x00959794+2727300]\n\tGetHandleVerifier [0x0095E36C+2746716]\n\tGetHandleVerifier [0x00756690+617600]\n\t(No symbol) [0x0064C712]\n\t(No symbol) [0x00651FF8]\n\t(No symbol) [0x006520DB]\n\t(No symbol) [0x0065C63B]\n\tBaseThreadInitThunk [0x76286359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87D4+228]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87A4+180]\n\n", "trace": "  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\test_demo\\SmokeTesting_test.py\", line 1230, in test_St110\n    drawer.LinkedConnections(DocumentType1)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\PageView\\Business_portal\\VaultHubPage.py\", line 92, in LinkedConnections\n    if Element(id_=imgDOCid).is_exist():\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\poium\\selenium.py\", line 489, in is_exist\n    elem = Browser.driver.find_elements(by=self.k, value=self.v)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 860, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Scenario 2: The selected rep has granted the document access for the corporate;", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=112.0.5615.50)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x006ADCE3]\n\t(No symbol) [0x006439D1]\n\t(No symbol) [0x00554DA8]\n\t(No symbol) [0x00580292]\n\t(No symbol) [0x005803AB]\n\t(No symbol) [0x005AEE9C]\n\t(No symbol) [0x0059AF14]\n\t(No symbol) [0x005AD57C]\n\t(No symbol) [0x0059ACC6]\n\t(No symbol) [0x00576F68]\n\t(No symbol) [0x005780CD]\n\tGetHandleVerifier [0x00923832+2506274]\n\tGetHandleVerifier [0x00959794+2727300]\n\tGetHandleVerifier [0x0095E36C+2746716]\n\tGetHandleVerifier [0x00756690+617600]\n\t(No symbol) [0x0064C712]\n\t(No symbol) [0x00651FF8]\n\t(No symbol) [0x006520DB]\n\t(No symbol) [0x0065C63B]\n\tBaseThreadInitThunk [0x76286359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87D4+228]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87A4+180]\n\n", "trace": "  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\test_demo\\SmokeTesting_test.py\", line 1230, in test_St110\n    drawer.LinkedConnections(DocumentType1)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\PageView\\Business_portal\\VaultHubPage.py\", line 92, in LinkedConnections\n    if Element(id_=imgDOCid).is_exist():\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\poium\\selenium.py\", line 489, in is_exist\n    elem = Browser.driver.find_elements(by=self.k, value=self.v)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 860, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "The obc user can see the reps document", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=112.0.5615.50)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x006ADCE3]\n\t(No symbol) [0x006439D1]\n\t(No symbol) [0x00554DA8]\n\t(No symbol) [0x00580292]\n\t(No symbol) [0x005803AB]\n\t(No symbol) [0x005AEE9C]\n\t(No symbol) [0x0059AF14]\n\t(No symbol) [0x005AD57C]\n\t(No symbol) [0x0059ACC6]\n\t(No symbol) [0x00576F68]\n\t(No symbol) [0x005780CD]\n\tGetHandleVerifier [0x00923832+2506274]\n\tGetHandleVerifier [0x00959794+2727300]\n\tGetHandleVerifier [0x0095E36C+2746716]\n\tGetHandleVerifier [0x00756690+617600]\n\t(No symbol) [0x0064C712]\n\t(No symbol) [0x00651FF8]\n\t(No symbol) [0x006520DB]\n\t(No symbol) [0x0065C63B]\n\tBaseThreadInitThunk [0x76286359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87D4+228]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87A4+180]\n\n", "trace": "  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\test_demo\\SmokeTesting_test.py\", line 1230, in test_St110\n    drawer.LinkedConnections(DocumentType1)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\PageView\\Business_portal\\VaultHubPage.py\", line 92, in LinkedConnections\n    if Element(id_=imgDOCid).is_exist():\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\poium\\selenium.py\", line 489, in is_exist\n    elem = Browser.driver.find_elements(by=self.k, value=self.v)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 860, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Login business portal...", "status": "passed", "start": 1683274857549, "stop": 1683274890186}, {"name": "Check the Notifications can find 99h@snapmail.cc link case", "status": "passed", "start": 1683274890186, "stop": 1683274980981}, {"name": "OBC  can check shared doc img", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=112.0.5615.50)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x006ADCE3]\n\t(No symbol) [0x006439D1]\n\t(No symbol) [0x00554DA8]\n\t(No symbol) [0x00580292]\n\t(No symbol) [0x005803AB]\n\t(No symbol) [0x005AEE9C]\n\t(No symbol) [0x0059AF14]\n\t(No symbol) [0x005AD57C]\n\t(No symbol) [0x0059ACC6]\n\t(No symbol) [0x00576F68]\n\t(No symbol) [0x005780CD]\n\tGetHandleVerifier [0x00923832+2506274]\n\tGetHandleVerifier [0x00959794+2727300]\n\tGetHandleVerifier [0x0095E36C+2746716]\n\tGetHandleVerifier [0x00756690+617600]\n\t(No symbol) [0x0064C712]\n\t(No symbol) [0x00651FF8]\n\t(No symbol) [0x006520DB]\n\t(No symbol) [0x0065C63B]\n\tBaseThreadInitThunk [0x76286359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87D4+228]\n\tRtlGetAppContainerNamedObjectPath [0x77DB87A4+180]\n\n", "trace": "  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\test_demo\\SmokeTesting_test.py\", line 1230, in test_St110\n    drawer.LinkedConnections(DocumentType1)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\PageView\\Business_portal\\VaultHubPage.py\", line 92, in LinkedConnections\n    if Element(id_=imgDOCid).is_exist():\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\poium\\selenium.py\", line 489, in is_exist\n    elem = Browser.driver.find_elements(by=self.k, value=self.v)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 860, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Users\\jianghaodong\\PycharmProjects\\pytest_study\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1683274982040, "stop": 1683274987377}], "start": 1683274857549, "stop": 1683274987438}], "start": 1683274857549, "stop": 1683274987440}], "start": 1683274857549, "stop": 1683274987441}, {"name": "当前case 失败截图", "status": "passed", "attachments": [{"name": "case 失败截图", "source": "0c28816e-bb7c-45ae-9f15-9ab3c2a76cfd-attachment.png", "type": "image/png"}], "start": 1683275016883, "stop": 1683275017140}], "attachments": [{"name": "log", "source": "5e992011-8231-4653-8d8f-5a00f310baf2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "CorpEmail", "value": "'99h@snapmail.cc'"}, {"name": "CorpName", "value": "'99h'"}, {"name": "Rep1Email", "value": "'99hrep1@snapmail.cc'"}, {"name": "Rep1Name", "value": "'99hrep1'"}, {"name": "Rep2Email", "value": "'99hrep2@snapmail.cc'"}, {"name": "Rep2Name", "value": "'99hrep2'"}, {"name": "DocumentType1", "value": "'National ID Card'"}, {"name": "Rep2Doc2", "value": "'Passport'"}, {"name": "Rep3Email", "value": "'99hrep3@snapmail.cc'"}, {"name": "Rep3Name", "value": "'99hrep3'"}, {"name": "DocumentType2", "value": "'Passport'"}, {"name": "Password", "value": "'Ht@12345'"}, {"name": "business_name", "value": "'ChloeCompany'"}, {"name": "NewProductName", "value": "'Link_NewCorp_WithRep_2'"}, {"name": "business_email", "value": "'chloe@snapmail.cc'"}, {"name": "business_password", "value": "'Ht@12345'"}], "start": 1683274847664, "stop": 1683275016280, "uuid": "0a8beb68-24ee-4900-a0e9-7b9649ccb439", "historyId": "f3f6a6beb2089518cf83a98a1667bf80", "testCaseId": "543d543a82e6bfefbe45c07722ed52e0", "fullName": "SmokeTesting_test.TestCaes#test_St110", "labels": [{"name": "epic", "value": "Somke Testing Valid8Me v2.11.0"}, {"name": "story", "value": "Verify that the corporate user should be able to upload a document.."}, {"name": "suite", "value": "SmokeTesting_test"}, {"name": "subSuite", "value": "TestCaes"}, {"name": "host", "value": "wswincnhz1692"}, {"name": "thread", "value": "37336-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "SmokeTesting_test"}]}